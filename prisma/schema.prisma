// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  roleId        String?   @db.ObjectId
  username      String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  role     Role?    @relation(fields: [roleId], references: [id], onDelete: SetNull)
  
  @@index([roleId])
}

model Role {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  isSystem    Boolean  @default(false) // Ruoli di sistema non possono essere eliminati
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users      User[]
  permissions RolePermission[]
}

model RolePermission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  roleId    String   @db.ObjectId
  menuItem  String   // Nome della voce menu (es: 'services', 'projects', etc.)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, menuItem])
  @@index([roleId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Service {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  sector      String
  icon        String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  image       String?
  tags        String   // JSON array as string
  client      String?
  year        Int?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String   // email, phone, address, facebook, instagram, linkedin
  value     String
  label     String?
  isActive  Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([type, value])
}

model BlogPost {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String   @unique
  content     String
  excerpt     String?
  featuredImage String?
  tags        String   // JSON array as string
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Recruitment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  isOpen        Boolean  @default(false)
  openDate      DateTime?
  closeDate     DateTime?
  description   String?
  requirements  String?
  benefits      String?
  googleFormUrl String?
  faqs          String?  // JSON array as string
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model RecruitmentApplication {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String
  course       String
  year         String
  roles        String   // JSON array as string
  cvUrl        String?
  notes        String?
  status       String    @default("pending") // pending, reviewed, accepted, rejected
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Policy {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String   // privacy, cookie, terms
  title     String
  content   String
  version   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([type, version])
}

model HomeSection {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique // hero, services, stats, portfolio, newsletter, contact
  title       String?
  subtitle    String?
  description String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  config      String?  // JSON configuration
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TeamMember {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  role        String
  image       String?
  description String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model NewsletterSubscriber {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewsletterEmail {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  subject     String
  content     String
  recipientCount Int   @default(0)
  senderEmailId String? // ID from Sender.net
  status      String   @default("draft") // draft, sent, failed
  sentAt      DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}